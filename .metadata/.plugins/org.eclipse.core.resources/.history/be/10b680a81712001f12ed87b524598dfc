package edu.sb.cookbook.service;

import java.util.Comparator;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.validation.constraints.Positive;
import javax.validation.constraints.PositiveOrZero;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import edu.sb.cookbook.persistence.Person;

@Path("persons")
public class PersonService {

    @PersistenceContext
    private EntityManager entityManager;

    /**
     * HTTP Signature: GET persons IN: - OUT: application/json
     */
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response queryPeople (
    	    @QueryParam("result-offset") @PositiveOrZero Integer resultOffset,
    	    @QueryParam("result-limit") @PositiveOrZero Integer resultLimit
    	) {
    	    try {
    	        TypedQuery<Long> query = entityManager.createQuery("SELECT p.id FROM Person p", Long.class);
    	        if (resultOffset != null) query.setFirstResult(resultOffset);
    	        if (resultLimit != null) query.setMaxResults(resultLimit);

    	        List<Long> personIds = query.getResultList();
    	        List<Person> people = personIds.stream()
    	                .map(id -> entityManager.find(Person.class, id))
    	                .sorted(Comparator.comparing(Person::getName).thenComparing(Person::getEmail))
    	                .collect(Collectors.toList());

    	        return Response.ok(people).build();
    	    } catch (Exception e) {
    	        return Response.serverError().entity(e.getMessage()).build();
    	    }
    	}


    /**
     * HTTP Signature: POST persons IN: application/json OUT: text/plain
     */
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.TEXT_PLAIN)
    public Response createOrUpdatePerson (
        @HeaderParam(BasicAuthenticationReceiverFilter.REQUESTER_IDENTITY) @Positive long requesterIdentity,
        Person person
    ) {
        try {
            // CREATE OR UPDATE PERSON
            return Response.ok().build();
        } catch (Exception e) {
            return Response.serverError().entity(e.getMessage()).build();
        }
    }

    /**
     * HTTP Signature: DELETE persons/{id} IN: - OUT: text/plain
     */
    @DELETE
    @Path("{id}")
    @Produces(MediaType.TEXT_PLAIN)
    public Response deletePerson (
        @PathParam("id") @Positive long id
    ) {
        try {
            // DELETE PERSON
            return Response.ok().build();
        } catch (Exception e) {
            return Response.serverError().entity(e.getMessage()).build();
        }
    }

    /**
     * HTTP Signature: GET persons/{id} IN: - OUT: application/json
     */
    @GET
    @Path("{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response findPerson (
        @PathParam("id") @Positive long id
    ) {
        try {
            Person person = entityManager.find(Person.class, id);
            if (person == null) {
                return Response.status(Response.Status.NOT_FOUND).build();
            } else {
                return Response.ok(person).build();
            }
        } catch (Exception e) {
            return Response.serverError().entity(e.getMessage()).build();
        }
    }

    // Add other methods here...

}
