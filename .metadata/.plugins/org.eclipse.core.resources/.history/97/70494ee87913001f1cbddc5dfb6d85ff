package edu.sb.cookbook.service;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;

@Path("persons")
public class PersonService {
	/**
	 * HTTP Signature: GET people IN: - OUT: application/json Returns the people
	 * matching the given filter criteria, with missing parameters identifying
	 * omitted criteria. Search criteria should be query parameters containing any
	 * “normal” property of both people and their composites, except identity and
	 * passwordHash, plus int values for result-offset and result-limit which define
	 * a paging range. The JPA query should return the matching Person-IDs, which
	 * are used subsequenty to query the people from the 2nd level cache using
	 * "entityManager.find()", and then sorted by name and email → best use
	 * Collection-Streams for the latter two steps.
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public void queryPeople() {
		// TODO
	}

	/**
	 * HTTP Signature: POST people IN: - JSON OUT: text/plain Inserts or updates a
	 * person from template data within the HTTP request body. It creates a new
	 * person if the given template's identity is zero, which solely admins may
	 * perform. Otherwise it updates the corresponding person with the given
	 * template data, which only adminstrators or the person itself may perform.
	 * Make sure non-administrators cannot upgrade their group. The default avatar
	 * with ID 1 shall be associated during creation if none is provided.
	 * Optionally, a new password may be set using the header field
	 * “X-Set-Password”. Returns the affected person's identity as text/plain. Only
	 * Admintrators or the given person may perform this operation.
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.TEXT_PLAIN)
	public void createOrUpdatePerson() {
		// TODO
	}

	/**
	 * HTTP Signature: DELETE people/{id} IN: - OUT: text/plain Deletes the person
	 * matching the given identity. This must not cascade deletion to the recipes
	 * and ingredient types owned by the matching person, but set their respective
	 * owner to null. Only Admintrators or the matching person may perform this
	 * operation.
	 */
	@DELETE
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.TEXT_PLAIN)
	@Path("{id}")
	public void deletePerson() {
		// TODO
	}

	/**
	 * HTTP Signature: GET people/{id} IN: - OUT: application/json Returns the
	 * person matching the given identity.
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("{id}")
	public void findPerson() {
		// TODO
	}

	/**
	 * HTTP Signature: GET people/requester IN: - OUT: application/json
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("requester")
	public void findRequester() {
		// TODO
	}

	/**
	 * HTTP Signature: GET people/{id}/recipes IN: - OUT: application/json
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("{id}/recipes")
	public void getRecipes() {
		// TODO
	}

	/**
	 * HTTP Signature: GET people/{id}/ingredient-types IN: - OUT: application/json
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("{id}/ingredient-types")
	public void getIngredientTypes() {
		// TODO
	}
}