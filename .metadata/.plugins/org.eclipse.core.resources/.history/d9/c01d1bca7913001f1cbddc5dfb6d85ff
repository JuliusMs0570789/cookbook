package edu.sb.cookbook.service;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;

@Path("persons")
public class PersonService {
	/**
	 * HTTP Signature: GET people IN: - OUT: application/json
	 * Returns the people matching the
given filter criteria, with missing parameters identifying omitted criteria. Search criteria
should be query parameters containing any “normal” property of both people and their
composites, except identity and passwordHash, plus int values for result-offset and
result-limit which define a paging range. The JPA query should return the matching
Person-IDs, which are used subsequenty to query the people from the 2nd level cache
using "entityManager.find()", and then sorted by name and email → best use
Collection-Streams for the latter two steps.
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public void queryPeople () {
		// TODO
	}
	
	/**
	 * HTTP Signature: POST people IN: - JSON OUT: text/plain
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.TEXT_PLAIN)
	public void createOrUpdatePerson () {
		// TODO
	}
	
	/**
	 * HTTP Signature: DELETE people/{id} IN: - OUT: text/plain
	 */
	@DELETE
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.TEXT_PLAIN)
	@Path("{id}")
	public void deletePerson () {
		// TODO
	}
	
	/**
	 * HTTP Signature: GET people/{id} IN: - OUT: application/json
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("{id}")
	public void findPerson () {
		// TODO
	}
	
	/**
	 * HTTP Signature: GET people/requester IN: - OUT: application/json
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("requester")
	public void findRequester () {
		// TODO
	}
	
	/**
	 * HTTP Signature: GET people/{id}/recipes IN: - OUT: application/json
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("{id}/recipes")
	public void getRecipes () {
		// TODO
	}
	
	/**
	 * HTTP Signature: GET people/{id}/ingredient-types IN: - OUT: application/json
	 */
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("{id}/ingredient-types")
	public void getIngredientTypes () {
		// TODO
	}
}